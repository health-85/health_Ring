package com.healthy.rvigor.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.healthy.rvigor.dao.entity.StepDBEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_DBENTITY".
*/
public class StepDBEntityDao extends AbstractDao<StepDBEntity, Long> {

    public static final String TABLENAME = "STEP_DBENTITY";

    /**
     * Properties of entity StepDBEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, long.class, "uid", false, "UID");
        public final static Property IsupLoadToServer = new Property(2, int.class, "isupLoadToServer", false, "ISUP_LOAD_TO_SERVER");
        public final static Property StepDay = new Property(3, long.class, "stepDay", false, "STEP_DAY");
        public final static Property TotalStep = new Property(4, long.class, "totalStep", false, "TOTAL_STEP");
        public final static Property StepCalorie = new Property(5, double.class, "stepCalorie", false, "STEP_CALORIE");
        public final static Property StepMileage = new Property(6, double.class, "stepMileage", false, "STEP_MILEAGE");
        public final static Property StepDataJsonArrayForTime = new Property(7, String.class, "stepDataJsonArrayForTime", false, "STEP_DATA_JSON_ARRAY_FOR_TIME");
        public final static Property DeviceName = new Property(8, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceMacAddress = new Property(9, String.class, "deviceMacAddress", false, "DEVICE_MAC_ADDRESS");
        public final static Property SportMode = new Property(10, int.class, "sportMode", false, "SPORT_MODE");
    }


    public StepDBEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StepDBEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_DBENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"ISUP_LOAD_TO_SERVER\" INTEGER NOT NULL ," + // 2: isupLoadToServer
                "\"STEP_DAY\" INTEGER NOT NULL ," + // 3: stepDay
                "\"TOTAL_STEP\" INTEGER NOT NULL ," + // 4: totalStep
                "\"STEP_CALORIE\" REAL NOT NULL ," + // 5: stepCalorie
                "\"STEP_MILEAGE\" REAL NOT NULL ," + // 6: stepMileage
                "\"STEP_DATA_JSON_ARRAY_FOR_TIME\" TEXT," + // 7: stepDataJsonArrayForTime
                "\"DEVICE_NAME\" TEXT," + // 8: deviceName
                "\"DEVICE_MAC_ADDRESS\" TEXT," + // 9: deviceMacAddress
                "\"SPORT_MODE\" INTEGER NOT NULL );"); // 10: sportMode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_DBENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StepDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getIsupLoadToServer());
        stmt.bindLong(4, entity.getStepDay());
        stmt.bindLong(5, entity.getTotalStep());
        stmt.bindDouble(6, entity.getStepCalorie());
        stmt.bindDouble(7, entity.getStepMileage());
 
        String stepDataJsonArrayForTime = entity.getStepDataJsonArrayForTime();
        if (stepDataJsonArrayForTime != null) {
            stmt.bindString(8, stepDataJsonArrayForTime);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(9, deviceName);
        }
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(10, deviceMacAddress);
        }
        stmt.bindLong(11, entity.getSportMode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StepDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getIsupLoadToServer());
        stmt.bindLong(4, entity.getStepDay());
        stmt.bindLong(5, entity.getTotalStep());
        stmt.bindDouble(6, entity.getStepCalorie());
        stmt.bindDouble(7, entity.getStepMileage());
 
        String stepDataJsonArrayForTime = entity.getStepDataJsonArrayForTime();
        if (stepDataJsonArrayForTime != null) {
            stmt.bindString(8, stepDataJsonArrayForTime);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(9, deviceName);
        }
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(10, deviceMacAddress);
        }
        stmt.bindLong(11, entity.getSportMode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StepDBEntity readEntity(Cursor cursor, int offset) {
        StepDBEntity entity = new StepDBEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // uid
            cursor.getInt(offset + 2), // isupLoadToServer
            cursor.getLong(offset + 3), // stepDay
            cursor.getLong(offset + 4), // totalStep
            cursor.getDouble(offset + 5), // stepCalorie
            cursor.getDouble(offset + 6), // stepMileage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // stepDataJsonArrayForTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deviceMacAddress
            cursor.getInt(offset + 10) // sportMode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StepDBEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getLong(offset + 1));
        entity.setIsupLoadToServer(cursor.getInt(offset + 2));
        entity.setStepDay(cursor.getLong(offset + 3));
        entity.setTotalStep(cursor.getLong(offset + 4));
        entity.setStepCalorie(cursor.getDouble(offset + 5));
        entity.setStepMileage(cursor.getDouble(offset + 6));
        entity.setStepDataJsonArrayForTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeviceMacAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSportMode(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StepDBEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StepDBEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StepDBEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
