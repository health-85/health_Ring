package com.healthy.rvigor.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.healthy.rvigor.dao.entity.SnoreNewDBEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SNORE_NEW_DBENTITY".
*/
public class SnoreNewDBEntityDao extends AbstractDao<SnoreNewDBEntity, Long> {

    public static final String TABLENAME = "SNORE_NEW_DBENTITY";

    /**
     * Properties of entity SnoreNewDBEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, long.class, "uid", false, "UID");
        public final static Property Day = new Property(2, long.class, "day", false, "DAY");
        public final static Property DeviceName = new Property(3, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceMacAddress = new Property(4, String.class, "deviceMacAddress", false, "DEVICE_MAC_ADDRESS");
        public final static Property SnoreLen = new Property(5, int.class, "snoreLen", false, "SNORE_LEN");
        public final static Property MaxDbF = new Property(6, int.class, "maxDbF", false, "MAX_DB_F");
        public final static Property AverageDb = new Property(7, int.class, "averageDb", false, "AVERAGE_DB");
        public final static Property MinDbF = new Property(8, int.class, "minDbF", false, "MIN_DB_F");
        public final static Property SnoreIndex = new Property(9, float.class, "snoreIndex", false, "SNORE_INDEX");
        public final static Property SnoreFrequency = new Property(10, int.class, "snoreFrequency", false, "SNORE_FREQUENCY");
        public final static Property SnoreNormal = new Property(11, int.class, "snoreNormal", false, "SNORE_NORMAL");
        public final static Property SnoreMild = new Property(12, int.class, "snoreMild", false, "SNORE_MILD");
        public final static Property SnoreMiddle = new Property(13, int.class, "snoreMiddle", false, "SNORE_MIDDLE");
        public final static Property SnoreSerious = new Property(14, int.class, "snoreSerious", false, "SNORE_SERIOUS");
        public final static Property SnoreJsonData = new Property(15, String.class, "snoreJsonData", false, "SNORE_JSON_DATA");
    }


    public SnoreNewDBEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SnoreNewDBEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SNORE_NEW_DBENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"DAY\" INTEGER NOT NULL ," + // 2: day
                "\"DEVICE_NAME\" TEXT," + // 3: deviceName
                "\"DEVICE_MAC_ADDRESS\" TEXT," + // 4: deviceMacAddress
                "\"SNORE_LEN\" INTEGER NOT NULL ," + // 5: snoreLen
                "\"MAX_DB_F\" INTEGER NOT NULL ," + // 6: maxDbF
                "\"AVERAGE_DB\" INTEGER NOT NULL ," + // 7: averageDb
                "\"MIN_DB_F\" INTEGER NOT NULL ," + // 8: minDbF
                "\"SNORE_INDEX\" REAL NOT NULL ," + // 9: snoreIndex
                "\"SNORE_FREQUENCY\" INTEGER NOT NULL ," + // 10: snoreFrequency
                "\"SNORE_NORMAL\" INTEGER NOT NULL ," + // 11: snoreNormal
                "\"SNORE_MILD\" INTEGER NOT NULL ," + // 12: snoreMild
                "\"SNORE_MIDDLE\" INTEGER NOT NULL ," + // 13: snoreMiddle
                "\"SNORE_SERIOUS\" INTEGER NOT NULL ," + // 14: snoreSerious
                "\"SNORE_JSON_DATA\" TEXT);"); // 15: snoreJsonData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SNORE_NEW_DBENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SnoreNewDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getDay());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(4, deviceName);
        }
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(5, deviceMacAddress);
        }
        stmt.bindLong(6, entity.getSnoreLen());
        stmt.bindLong(7, entity.getMaxDbF());
        stmt.bindLong(8, entity.getAverageDb());
        stmt.bindLong(9, entity.getMinDbF());
        stmt.bindDouble(10, entity.getSnoreIndex());
        stmt.bindLong(11, entity.getSnoreFrequency());
        stmt.bindLong(12, entity.getSnoreNormal());
        stmt.bindLong(13, entity.getSnoreMild());
        stmt.bindLong(14, entity.getSnoreMiddle());
        stmt.bindLong(15, entity.getSnoreSerious());
 
        String snoreJsonData = entity.getSnoreJsonData();
        if (snoreJsonData != null) {
            stmt.bindString(16, snoreJsonData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SnoreNewDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getDay());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(4, deviceName);
        }
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(5, deviceMacAddress);
        }
        stmt.bindLong(6, entity.getSnoreLen());
        stmt.bindLong(7, entity.getMaxDbF());
        stmt.bindLong(8, entity.getAverageDb());
        stmt.bindLong(9, entity.getMinDbF());
        stmt.bindDouble(10, entity.getSnoreIndex());
        stmt.bindLong(11, entity.getSnoreFrequency());
        stmt.bindLong(12, entity.getSnoreNormal());
        stmt.bindLong(13, entity.getSnoreMild());
        stmt.bindLong(14, entity.getSnoreMiddle());
        stmt.bindLong(15, entity.getSnoreSerious());
 
        String snoreJsonData = entity.getSnoreJsonData();
        if (snoreJsonData != null) {
            stmt.bindString(16, snoreJsonData);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SnoreNewDBEntity readEntity(Cursor cursor, int offset) {
        SnoreNewDBEntity entity = new SnoreNewDBEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // uid
            cursor.getLong(offset + 2), // day
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceMacAddress
            cursor.getInt(offset + 5), // snoreLen
            cursor.getInt(offset + 6), // maxDbF
            cursor.getInt(offset + 7), // averageDb
            cursor.getInt(offset + 8), // minDbF
            cursor.getFloat(offset + 9), // snoreIndex
            cursor.getInt(offset + 10), // snoreFrequency
            cursor.getInt(offset + 11), // snoreNormal
            cursor.getInt(offset + 12), // snoreMild
            cursor.getInt(offset + 13), // snoreMiddle
            cursor.getInt(offset + 14), // snoreSerious
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // snoreJsonData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SnoreNewDBEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getLong(offset + 1));
        entity.setDay(cursor.getLong(offset + 2));
        entity.setDeviceName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceMacAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSnoreLen(cursor.getInt(offset + 5));
        entity.setMaxDbF(cursor.getInt(offset + 6));
        entity.setAverageDb(cursor.getInt(offset + 7));
        entity.setMinDbF(cursor.getInt(offset + 8));
        entity.setSnoreIndex(cursor.getFloat(offset + 9));
        entity.setSnoreFrequency(cursor.getInt(offset + 10));
        entity.setSnoreNormal(cursor.getInt(offset + 11));
        entity.setSnoreMild(cursor.getInt(offset + 12));
        entity.setSnoreMiddle(cursor.getInt(offset + 13));
        entity.setSnoreSerious(cursor.getInt(offset + 14));
        entity.setSnoreJsonData(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SnoreNewDBEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SnoreNewDBEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SnoreNewDBEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
