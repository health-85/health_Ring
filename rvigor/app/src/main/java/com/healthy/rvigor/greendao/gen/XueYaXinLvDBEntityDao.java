package com.healthy.rvigor.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.healthy.rvigor.dao.entity.XueYaXinLvDBEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XUE_YA_XIN_LV_DBENTITY".
*/
public class XueYaXinLvDBEntityDao extends AbstractDao<XueYaXinLvDBEntity, Long> {

    public static final String TABLENAME = "XUE_YA_XIN_LV_DBENTITY";

    /**
     * Properties of entity XueYaXinLvDBEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TestUUID = new Property(1, String.class, "testUUID", false, "TEST_UUID");
        public final static Property TestDay = new Property(2, long.class, "testDay", false, "TEST_DAY");
        public final static Property TestDate = new Property(3, long.class, "testDate", false, "TEST_DATE");
        public final static Property Uid = new Property(4, long.class, "uid", false, "UID");
        public final static Property IsupLoadToServer = new Property(5, int.class, "isupLoadToServer", false, "ISUP_LOAD_TO_SERVER");
        public final static Property DeviceMacAddress = new Property(6, String.class, "deviceMacAddress", false, "DEVICE_MAC_ADDRESS");
        public final static Property DeviceName = new Property(7, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property XueYaXinLvJsonArrayData = new Property(8, String.class, "XueYaXinLvJsonArrayData", false, "XUE_YA_XIN_LV_JSON_ARRAY_DATA");
    }


    public XueYaXinLvDBEntityDao(DaoConfig config) {
        super(config);
    }
    
    public XueYaXinLvDBEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XUE_YA_XIN_LV_DBENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TEST_UUID\" TEXT," + // 1: testUUID
                "\"TEST_DAY\" INTEGER NOT NULL ," + // 2: testDay
                "\"TEST_DATE\" INTEGER NOT NULL ," + // 3: testDate
                "\"UID\" INTEGER NOT NULL ," + // 4: uid
                "\"ISUP_LOAD_TO_SERVER\" INTEGER NOT NULL ," + // 5: isupLoadToServer
                "\"DEVICE_MAC_ADDRESS\" TEXT," + // 6: deviceMacAddress
                "\"DEVICE_NAME\" TEXT," + // 7: deviceName
                "\"XUE_YA_XIN_LV_JSON_ARRAY_DATA\" TEXT);"); // 8: XueYaXinLvJsonArrayData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XUE_YA_XIN_LV_DBENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, XueYaXinLvDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String testUUID = entity.getTestUUID();
        if (testUUID != null) {
            stmt.bindString(2, testUUID);
        }
        stmt.bindLong(3, entity.getTestDay());
        stmt.bindLong(4, entity.getTestDate());
        stmt.bindLong(5, entity.getUid());
        stmt.bindLong(6, entity.getIsupLoadToServer());
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(7, deviceMacAddress);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(8, deviceName);
        }
 
        String XueYaXinLvJsonArrayData = entity.getXueYaXinLvJsonArrayData();
        if (XueYaXinLvJsonArrayData != null) {
            stmt.bindString(9, XueYaXinLvJsonArrayData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, XueYaXinLvDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String testUUID = entity.getTestUUID();
        if (testUUID != null) {
            stmt.bindString(2, testUUID);
        }
        stmt.bindLong(3, entity.getTestDay());
        stmt.bindLong(4, entity.getTestDate());
        stmt.bindLong(5, entity.getUid());
        stmt.bindLong(6, entity.getIsupLoadToServer());
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(7, deviceMacAddress);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(8, deviceName);
        }
 
        String XueYaXinLvJsonArrayData = entity.getXueYaXinLvJsonArrayData();
        if (XueYaXinLvJsonArrayData != null) {
            stmt.bindString(9, XueYaXinLvJsonArrayData);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public XueYaXinLvDBEntity readEntity(Cursor cursor, int offset) {
        XueYaXinLvDBEntity entity = new XueYaXinLvDBEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // testUUID
            cursor.getLong(offset + 2), // testDay
            cursor.getLong(offset + 3), // testDate
            cursor.getLong(offset + 4), // uid
            cursor.getInt(offset + 5), // isupLoadToServer
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceMacAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deviceName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // XueYaXinLvJsonArrayData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XueYaXinLvDBEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTestUUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTestDay(cursor.getLong(offset + 2));
        entity.setTestDate(cursor.getLong(offset + 3));
        entity.setUid(cursor.getLong(offset + 4));
        entity.setIsupLoadToServer(cursor.getInt(offset + 5));
        entity.setDeviceMacAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeviceName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setXueYaXinLvJsonArrayData(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(XueYaXinLvDBEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(XueYaXinLvDBEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(XueYaXinLvDBEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
