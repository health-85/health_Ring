package com.healthy.rvigor.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.healthy.rvigor.dao.entity.SiestaDBEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SIESTA_DBENTITY".
*/
public class SiestaDBEntityDao extends AbstractDao<SiestaDBEntity, Long> {

    public static final String TABLENAME = "SIESTA_DBENTITY";

    /**
     * Properties of entity SiestaDBEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, long.class, "uid", false, "UID");
        public final static Property IsupLoadToServer = new Property(2, int.class, "isupLoadToServer", false, "ISUP_LOAD_TO_SERVER");
        public final static Property DeviceName = new Property(3, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceMacAddress = new Property(4, String.class, "deviceMacAddress", false, "DEVICE_MAC_ADDRESS");
        public final static Property SiestaDay = new Property(5, long.class, "siestaDay", false, "SIESTA_DAY");
        public final static Property SiestaLength = new Property(6, long.class, "siestaLength", false, "SIESTA_LENGTH");
        public final static Property StartTime = new Property(7, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(8, String.class, "endTime", false, "END_TIME");
    }


    public SiestaDBEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SiestaDBEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SIESTA_DBENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"ISUP_LOAD_TO_SERVER\" INTEGER NOT NULL ," + // 2: isupLoadToServer
                "\"DEVICE_NAME\" TEXT," + // 3: deviceName
                "\"DEVICE_MAC_ADDRESS\" TEXT," + // 4: deviceMacAddress
                "\"SIESTA_DAY\" INTEGER NOT NULL ," + // 5: siestaDay
                "\"SIESTA_LENGTH\" INTEGER NOT NULL ," + // 6: siestaLength
                "\"START_TIME\" TEXT," + // 7: startTime
                "\"END_TIME\" TEXT);"); // 8: endTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIESTA_DBENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SiestaDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getIsupLoadToServer());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(4, deviceName);
        }
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(5, deviceMacAddress);
        }
        stmt.bindLong(6, entity.getSiestaDay());
        stmt.bindLong(7, entity.getSiestaLength());
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(8, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(9, endTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SiestaDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getIsupLoadToServer());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(4, deviceName);
        }
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(5, deviceMacAddress);
        }
        stmt.bindLong(6, entity.getSiestaDay());
        stmt.bindLong(7, entity.getSiestaLength());
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(8, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(9, endTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SiestaDBEntity readEntity(Cursor cursor, int offset) {
        SiestaDBEntity entity = new SiestaDBEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // uid
            cursor.getInt(offset + 2), // isupLoadToServer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceMacAddress
            cursor.getLong(offset + 5), // siestaDay
            cursor.getLong(offset + 6), // siestaLength
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // startTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // endTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SiestaDBEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getLong(offset + 1));
        entity.setIsupLoadToServer(cursor.getInt(offset + 2));
        entity.setDeviceName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceMacAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSiestaDay(cursor.getLong(offset + 5));
        entity.setSiestaLength(cursor.getLong(offset + 6));
        entity.setStartTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SiestaDBEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SiestaDBEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SiestaDBEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
