package com.healthy.rvigor.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.healthy.rvigor.dao.entity.StrengthDBEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STRENGTH_DBENTITY".
*/
public class StrengthDBEntityDao extends AbstractDao<StrengthDBEntity, Long> {

    public static final String TABLENAME = "STRENGTH_DBENTITY";

    /**
     * Properties of entity StrengthDBEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, long.class, "uid", false, "UID");
        public final static Property IsupLoadToServer = new Property(2, int.class, "isupLoadToServer", false, "ISUP_LOAD_TO_SERVER");
        public final static Property Day = new Property(3, long.class, "day", false, "DAY");
        public final static Property DeviceName = new Property(4, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceMacAddress = new Property(5, String.class, "deviceMacAddress", false, "DEVICE_MAC_ADDRESS");
        public final static Property InLow = new Property(6, int.class, "inLow", false, "IN_LOW");
        public final static Property InCentre = new Property(7, int.class, "inCentre", false, "IN_CENTRE");
        public final static Property InHigh = new Property(8, int.class, "inHigh", false, "IN_HIGH");
        public final static Property JsonData = new Property(9, String.class, "jsonData", false, "JSON_DATA");
    }


    public StrengthDBEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StrengthDBEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STRENGTH_DBENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"ISUP_LOAD_TO_SERVER\" INTEGER NOT NULL ," + // 2: isupLoadToServer
                "\"DAY\" INTEGER NOT NULL ," + // 3: day
                "\"DEVICE_NAME\" TEXT," + // 4: deviceName
                "\"DEVICE_MAC_ADDRESS\" TEXT," + // 5: deviceMacAddress
                "\"IN_LOW\" INTEGER NOT NULL ," + // 6: inLow
                "\"IN_CENTRE\" INTEGER NOT NULL ," + // 7: inCentre
                "\"IN_HIGH\" INTEGER NOT NULL ," + // 8: inHigh
                "\"JSON_DATA\" TEXT);"); // 9: jsonData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STRENGTH_DBENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StrengthDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getIsupLoadToServer());
        stmt.bindLong(4, entity.getDay());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(6, deviceMacAddress);
        }
        stmt.bindLong(7, entity.getInLow());
        stmt.bindLong(8, entity.getInCentre());
        stmt.bindLong(9, entity.getInHigh());
 
        String jsonData = entity.getJsonData();
        if (jsonData != null) {
            stmt.bindString(10, jsonData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StrengthDBEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getIsupLoadToServer());
        stmt.bindLong(4, entity.getDay());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
 
        String deviceMacAddress = entity.getDeviceMacAddress();
        if (deviceMacAddress != null) {
            stmt.bindString(6, deviceMacAddress);
        }
        stmt.bindLong(7, entity.getInLow());
        stmt.bindLong(8, entity.getInCentre());
        stmt.bindLong(9, entity.getInHigh());
 
        String jsonData = entity.getJsonData();
        if (jsonData != null) {
            stmt.bindString(10, jsonData);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StrengthDBEntity readEntity(Cursor cursor, int offset) {
        StrengthDBEntity entity = new StrengthDBEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // uid
            cursor.getInt(offset + 2), // isupLoadToServer
            cursor.getLong(offset + 3), // day
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceMacAddress
            cursor.getInt(offset + 6), // inLow
            cursor.getInt(offset + 7), // inCentre
            cursor.getInt(offset + 8), // inHigh
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // jsonData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StrengthDBEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getLong(offset + 1));
        entity.setIsupLoadToServer(cursor.getInt(offset + 2));
        entity.setDay(cursor.getLong(offset + 3));
        entity.setDeviceName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceMacAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInLow(cursor.getInt(offset + 6));
        entity.setInCentre(cursor.getInt(offset + 7));
        entity.setInHigh(cursor.getInt(offset + 8));
        entity.setJsonData(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StrengthDBEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StrengthDBEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StrengthDBEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
